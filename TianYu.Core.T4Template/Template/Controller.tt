<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="/" #> 
  
<#@ include file="$(ProjectDir)/MySqlDbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)/Manager.ttinclude"	#> 

 
<# 
    var manager = new Manager(Host, GenerationEnvironment, true); 
	var OutputPath1 = Path.GetDirectoryName(Host.TemplateFile+"..");
	OutputPath1=Path.Combine(OutputPath1,"Admin","Controllers");
	if (!Directory.Exists(OutputPath1))
	{
	    Directory.CreateDirectory(OutputPath1);
	}
#>
<# foreach (DbTable item in DbHelper.GetDbTables())
   { 
		manager.StartBlock(item.TableName+"Controllers.cs",OutputPath1);//文件名
	   #>
//--------------------------------------------------------------------
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> 
//     对此文件的更改可能会导致不正确的行为，并且如果重新生成代码，这些更改将会丢失。
//--------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using SqlSugar;
using TianYu.Blog.Domain.DomainModel;
using TianYu.Blog.Domain.ViewModel.Request;
using TianYu.Blog.Infrastructure.Enums;
using TianYu.Blog.Service;
using TianYu.Core.Common;

namespace TianYu.Blog.WebMvc.Areas.Admin.Controllers
{
    public class <#=item.TableName#>Controller : BaseController
    {
        private I<#=item.TableName#>Service _<#=item.LowerTableName#>Service; 
        public <#=item.TableName#>Controller(I<#=item.TableName#>Service <#=item.LowerTableName#>Service)
        {
            this._<#=item.LowerTableName#>Service = <#=item.LowerTableName#>Service; 
        }



        public IActionResult Index()
        { 
            return View();
        }
        public IActionResult AddEdit(string guid)
        {
            var model = new <#=item.TableName#>();
            if (!string.IsNullOrWhiteSpace(guid))
            {
                model = _<#=item.LowerTableName#>Service.FindById(guid);
            } 

            return View(model);
        }




        public async Task<JsonResult> GetList([FromQuery]<#=item.TableName#>ListRequestModel requestModel)
        {
            var res = new AjaxResult();

            var list = await _<#=item.LowerTableName#>Service.FindPageListAsync(requestModel);

            res.Data = list;
            res.Count = requestModel.Total;
            res.Code = ResultCode.Succeed;
            return Json(res);
        }
        public async Task<JsonResult> Save(Save<#=item.TableName#>RequestModel requestModel)
        {
            var res = new AjaxResult();
            res.Code = ResultCode.Failure;

              

            res.Code = ResultCode.Succeed;
            return Json(res);
        }
        public async Task<JsonResult> Remove(string[] guids)
        {
            var res = new AjaxResult();
            res.Code = ResultCode.Failure;

            bool result = await _<#=item.LowerTableName#>Service.UpdateAsync(o => new Article()
            {
                Status = StatusEnum.Invalid,
                Modifier = LoginUserName,
                ModifyGuid = LoginUserGuid,
                ModifyTime = DateTime.Now
            }, o => guids.Contains(o.Guid));

            if (result)
            {
                res.Code = ResultCode.Succeed;
                return Json(res);
            }
            else
            {
                res.Code = ResultCode.Failure;
                res.Message = "删除失败";
                return Json(res);
            }
        } 
    }
}
	 
<#
   manager.EndBlock(); 
   }
  manager.Process(true);
#>